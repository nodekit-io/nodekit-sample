module.exports = { contents : "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _mobx = require(\"mobx\");\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*\n* OffGrid Talkie\n*\n* Copyright (c) 2017 OffGrid Networks. All Rights Reserved.\n* SEE LICENSE\n*/\n\nglobal.com = global.com || {};\nglobal.com.offgridn = global.com.offgridn || {};\nglobal.com.offgridn.chat = global.com.offgridn.chat || {\n  sendMessage: function sendMessage() {\n    console.log(\"Not Implemented\");\n  },\n  on: function on() {\n    console.log(\"Not Implemented\");\n  }\n};\nvar offgridChat = global.com.offgridn.chat;\n\nvar WELCOME = { \"urn:consumer:message:text\": \"Hi there\", \"urn:consumer:id\": \"ai:offgrid\" };\n\nvar MessagesStore = function MessagesStore() {\n  var _this = this;\n\n  _classCallCheck(this, MessagesStore);\n\n  this.json = (0, _mobx.computed)(function () {\n    return (0, _mobx.toJS)(_this.items);\n  });\n\n  this.closeLastCard = function () {\n    if (_this.items.length > 1 && _this.items[_this.items.length - 1].card && _this.items[_this.items.length - 1].card.type === \"multi-choice\") _this.items[_this.items.length - 1].card.choices = [];\n  };\n\n  this.push = function (item) {\n    offgridChat.sendMessage(item[\"urn:consumer:message:text\"]);\n\n    return _this.store_(item);\n  };\n\n  this.store_ = function (item) {\n\n    _this.items.push((0, _mobx.observable)(item));\n\n    _this.mru.push((0, _mobx.toJS)(item));\n\n    if (_this.mru.length > 9) _this.mru.splice(0, 1);\n    var blob = JSON.stringify((0, _mobx.toJS)(_this.mru));\n    sessionStorage.setItem(\"messages/mru\", blob);\n\n    return Promise.resolve(true);\n  };\n\n  this.clear = function () {\n    _this.items.splice(0);\n    _this.mru.push(0);\n    _this.push(WELCOME);\n    sessionStorage.setItem(\"messages/mru\", []);\n    return Promise.resolve(true);\n  };\n\n  try {\n    this.mru = JSON.parse(sessionStorage.getItem(\"messages/mru\"));\n    this.mru.forEach(function (item, index) {\n      if (index !== this.mru.length - 1 && item.card && item.card.choices) item.card.choices = [];\n    }.bind(this));\n  } catch (ex) {\n    this.mru = null;\n  }\n\n  this.mru = this.mru || [WELCOME];\n\n  (0, _mobx.extendObservable)(this, {\n    items: this.mru\n  });\n\n  var self = this;\n\n  offgridChat.on(\"recv\", function (msg, sender) {\n    var item = {\n      \"urn:consumer:message:text\": msg,\n      \"urn:consumer:id\": sender,\n      \"urn:consumer:timestamp\": new Date().getTime()\n    };\n\n    self.store_(item);\n  });\n};\n\nvar messages = new MessagesStore();\nexports.default = messages;", 
dependencies : ["mobx"], 
sourceMap : "{\"version\":3,\"sources\":[\"store/messages.js\"],\"names\":[\"global\",\"com\",\"offgridn\",\"chat\",\"sendMessage\",\"console\",\"log\",\"on\",\"offgridChat\",\"WELCOME\",\"MessagesStore\",\"json\",\"items\",\"closeLastCard\",\"length\",\"card\",\"type\",\"choices\",\"push\",\"item\",\"store_\",\"mru\",\"splice\",\"blob\",\"JSON\",\"stringify\",\"sessionStorage\",\"setItem\",\"Promise\",\"resolve\",\"clear\",\"parse\",\"getItem\",\"forEach\",\"index\",\"bind\",\"ex\",\"self\",\"msg\",\"sender\",\"Date\",\"getTime\",\"messages\"],\"mappings\":\"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\",\"file\":\"store/messages.js\",\"sourcesContent\":[\"/*\\n* OffGrid Talkie\\n*\\n* Copyright (c) 2017 OffGrid Networks. All Rights Reserved.\\n* SEE LICENSE\\n*/\\n\\n\\nglobal.com = global.com || {};\\nglobal.com.offgridn = global.com.offgridn || {};\\nglobal.com.offgridn.chat = global.com.offgridn.chat || {\\n  sendMessage: function(){ console.log(\\\"Not Implemented\\\")},\\n  on: function() { console.log(\\\"Not Implemented\\\")}\\n};\\nconst offgridChat = global.com.offgridn.chat;\\n\\nimport { extendObservable, observable, computed } from \\\"mobx\\\"\\nimport { toJS } from 'mobx';\\nconst WELCOME = { \\\"urn:consumer:message:text\\\": \\\"Hi there\\\", \\\"urn:consumer:id\\\": \\\"ai:offgrid\\\" }\\n\\nclass MessagesStore {\\n\\n  constructor() {\\n    try {\\n      this.mru = JSON.parse(sessionStorage.getItem(\\\"messages/mru\\\"));\\n      this.mru.forEach((function (item, index) {\\n        if ((index !== this.mru.length - 1) && item.card && item.card.choices)\\n          item.card.choices = [];\\n      }).bind(this))\\n    } catch (ex) {\\n      this.mru = null;\\n    }\\n\\n    this.mru = this.mru || [WELCOME]\\n\\n    extendObservable(this, {\\n      items: this.mru\\n    });\\n\\n    var self = this;\\n\\n    offgridChat.on(\\\"recv\\\", function (msg, sender) {\\n      var item = {\\n        \\\"urn:consumer:message:text\\\": msg,\\n        \\\"urn:consumer:id\\\": sender,\\n        \\\"urn:consumer:timestamp\\\": new Date().getTime()\\n      }\\n\\n      self.store_(item);\\n    })\\n  }\\n\\n  json = computed(() => {\\n    return toJS(this.items);\\n  });\\n\\n  closeLastCard = () => {\\n    if ((this.items.length > 1) &&\\n      (this.items[this.items.length - 1].card) && (this.items[this.items.length - 1].card.type === \\\"multi-choice\\\"))\\n      this.items[this.items.length - 1].card.choices = [];\\n  }\\n\\n  push = (item) => {\\n    offgridChat.sendMessage(item[\\\"urn:consumer:message:text\\\"])\\n\\n    return this.store_(item)\\n  };\\n\\n   store_ = (item) => {\\n\\n    this.items.push(observable(item));\\n\\n    this.mru.push(toJS(item));\\n\\n    if (this.mru.length > 9) this.mru.splice(0, 1);\\n    var blob = JSON.stringify(toJS(this.mru));\\n    sessionStorage.setItem(\\\"messages/mru\\\", blob);\\n\\n    return Promise.resolve(true);\\n  };\\n\\n  clear = () => {\\n    this.items.splice(0);\\n    this.mru.push(0);\\n    this.push(WELCOME);\\n    sessionStorage.setItem(\\\"messages/mru\\\", []);\\n    return Promise.resolve(true);\\n  };\\n\\n}\\n\\nconst messages = new MessagesStore();\\nexport default messages;\\n\"]}",
headerContent : undefined, 
mtime : 1485808069000
};